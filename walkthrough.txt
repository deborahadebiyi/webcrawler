Questions

- How would you avoid conflicts in a concurrent multi threaded system?
- Why did I organise the code this way
- How would I extend or improve the solution
- Error handling 
- Concurrency
- How would you handle failures of a transient service

- Validation and benefits 
- How would I handle intermittent network failures 
- What security concerns would you usually consider
- How would ypu handle messages in a queue unable to be consumed because
of deserialisation errors
- What is operability and how do you use it day to day
- How can you ensure indempotency in your API
- What's the importance of DTOs (data transfer objects)
- Naming conventions
- Event driven architecture
- Different types of tests
- Limitations of the implementation
- Iterations of the solution
- Language/framework justification
- How I approached the task and where did I start
- Implementation design and data structures
- Performance considerations
- Security, CORS
- Trade-offs

//Things to fix
- using the caught error and printing to the console for troubleshooting in fetchInnerHtml

//The functions

- checkValidUrl
ensures the url is valid using in built URL constructor and makes code DRY

- fetchInnerHtml
used to get the html body 

- getHtmlLinks
used to get all links from the html body

- getDomainLinks
used to retrieve the link elements that have the same domain as the provided url

- standardiseUrl
takes an array or urls and removes any caps and trailing slashes

// Stretch goals 
- authorisation for users to see all pages available
- tells you if a link is secure
- code coverage
- linting 
- integration tests




